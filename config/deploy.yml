# Name of your application. Used to uniquely configure containers.
service: memedex

# Name of the container image.
image: kodingwarrior/memedex-backend

# Deploy to these servers.
servers:
  web:
    hosts:
      - memedex.kodingwarrior.dev
    labels:
      traefik.http.routers.memedex.rule: Host(`memedex.kodingwarrior.dev`)
      traefik.http.routers.memedex_secure.entrypoints: websecure
      traefik.http.routers.memedex_secure.rule: Host(`memedex.kodingwarrior.dev`)
      traefik.http.routers.memedex_secure.tls: true
      traefik.http.routers.memedex_secure.tls.certresolver: letsencrypt
    options:
      network: private

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  server: ghcr.io
  username: malkoG

  # Always use an access token rather than real password when possible.
  # Github Token
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    DB_HOST: <%= ENV["DB_HOST"] %>
    POSTGRES_USER: <%= ENV["POSTGRES_USER"] %>
    POSTGRES_DB: <%= ENV["POSTGRES_DB"] %>
    POSTGRES_PASSWORD: <%= ENV["POSTGRES_PASSWORD"] %>
    DJANGO_SECRET_KEY: <%= ENV["DJANGO_SECRET_KEY"] %>
    DJANGO_SETTINGS_MODULE: <%= ENV["DJANGO_SETTINGS_MODULE"] %>
    GOOGLE_CREDENTIALS_BASE64_ENCODED: <%= ENV["GOOGLE_CREDENTIALS_BASE64_ENCODED"] %>
  secret:
    - DJANGO_SECRET_KEY
    - DB_HOST
    - POSTGRES_PASSWORD
    - POSTGRES_USER
    - POSTGRES_DB
    - GOOGLE_CREDENTIALS_BASE64_ENCODED

# Configure builder setup.
builder:
  args:
    PYTHON_VERSION: 3.11.4
    DB_HOST: <%= ENV["DB_HOST"] %>
    POSTGRES_PASSWORD: <%= ENV["POSTGRES_PASSWORD"] %>
    POSTGRES_USER: <%= ENV["POSTGRES_USER"] %>
    POSTGRES_DB: <%= ENV["POSTGRES_DB"] %>
    DJANGO_SECRET_KEY: <%= ENV["DJANGO_SECRET_KEY"] %>
    DJANGO_SETTINGS_MODULE: <%= ENV["DJANGO_SETTINGS_MODULE"] %>
    GOOGLE_CREDENTIALS_BASE64_ENCODED: <%= ENV["GOOGLE_CREDENTIALS_BASE64_ENCODED"] %>
  multiarch: false

# Use accessory services (secrets come from .env).
accessories:
  db:
    image: postgres:15
    host: <%= ENV["DB_HOST"] %>
    port: 5432
    env:
      clear:
        POSTGRES_USER: <%= ENV["POSTGRES_USER"] %>
        POSTGRES_DB: <%= ENV["POSTGRES_DB"] %>
      secret:
        - POSTGRES_PASSWORD
    directories:
      - data:/var/lib/postgresql/data
    files:
      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql
    options:
      network: private

# Use a different ssh user than root
ssh:
  user: kojima-memedex

healthcheck:
  port: 8000

traefik:
  options:
    publish:
      - "8080:8080"
      - "443:443"
      - "8000:8000"
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
    network: "private"
  args:
    api.dashboard: true
    api.insecure: true
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    entryPoints.web.http.redirections.entryPoint.to: websecure # We want to force https
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "no-reply@kodingwarrior.dev"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web
